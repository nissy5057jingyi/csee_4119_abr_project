#!/usr/bin/env python3.10

import sys
import socket
import threading
import time
import re

def log_chunk(log_file, duration, server_ip, chunk_path, chunk_size):
    """Log chunk information in the required format"""
    current_time = int(time.time())
    log_entry = f"{current_time} {duration:.6f} {server_ip} {chunk_path} {chunk_size}"
    
    with open(log_file, "a") as f:
        f.write(log_entry + "\n")
        f.flush()  # Ensure immediate write to disk

def get_chunk_size(response):
    """Extract chunk size from HTTP response (excluding headers)"""
    try:
        # Find the end of headers marked by \r\n\r\n
        header_end = response.find(b'\r\n\r\n')
        if header_end != -1:
            # Return length of content after headers
            return len(response[header_end + 4:])
        return len(response)  # Fallback if no headers found
    except Exception as e:
        print(f"Error calculating chunk size: {e}")
        return 0

def get_chunk_path(request):
    """Extract the chunk path from HTTP GET request"""
    try:
        # Split the request into lines and get the first line
        request_line = request.decode().split('\n')[0]
        # Extract path from GET request line
        match = re.match(r'GET (.*?) HTTP', request_line)
        if match:
            path = match.group(1)
            return path if path != "/" else "/index"
        return "/index"
    except Exception as e:
        print(f"Error extracting chunk path: {e}")
        return "/error"

def handle_client(client_socket, log_file, fake_ip, server_ip):
    """Handle individual client connections"""
    try:
        # Receive client request
        request = client_socket.recv(4096)
        if not request:
            client_socket.close()
            return

        # Extract chunk path from request
        chunk_path = get_chunk_path(request)

        # Create server connection
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind((fake_ip, 0))  # Bind to fake IP
        server_socket.connect((server_ip, 80))

        # Time the request
        start_time = time.time()

        # Forward request to server
        server_socket.sendall(request)

        # Receive and forward response
        response = b''
        while True:
            data = server_socket.recv(4096)
            if not data:
                break
            response += data
            client_socket.sendall(data)

        # Calculate duration and chunk size
        duration = time.time() - start_time
        chunk_size = get_chunk_size(response)

        # Log the chunk information
        log_chunk(log_file, duration, server_ip, chunk_path, chunk_size)

    except Exception as e:
        print(f"Error handling client: {e}")
    finally:
        try:
            client_socket.close()
            server_socket.close()
        except:
            pass

def start_proxy(log_file, listen_port, fake_ip, server_ip):
    """Start the proxy server"""
    try:
        # Create the proxy socket
        proxy_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        proxy_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        proxy_socket.bind(('', listen_port))  # Bind to all interfaces
        proxy_socket.listen(100)  # Support up to 100 concurrent connections
        
        print(f"Proxy listening on port {listen_port}")

        while True:
            # Accept client connections
            client_socket, client_addr = proxy_socket.accept()
            print(f"New connection from {client_addr}")
            
            # Start new thread for each client
            client_thread = threading.Thread(
                target=handle_client,
                args=(client_socket, log_file, fake_ip, server_ip)
            )
            client_thread.daemon = True
            client_thread.start()

    except Exception as e:
        print(f"Proxy server error: {e}")
    finally:
        proxy_socket.close()

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: ./proxy <log> <listen-port> <fake-ip> <server-ip>")
        sys.exit(1)

    log_file = sys.argv[1]
    listen_port = int(sys.argv[2])
    fake_ip = sys.argv[3]
    server_ip = sys.argv[4]

    start_proxy(log_file, listen_port, fake_ip, server_ip)
